require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(Number) : [];
const userSessions = new Map();
const activeRequests = new Set();
const ORDERS_FILE = path.join(__dirname, 'orders.json');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const USER_STATE = {
  IDLE: 'idle',
  AWAITING_CAR_INFO: 'awaiting_car',
  AWAITING_PARTS_INFO: 'awaiting_parts',
  AWAITING_PHOTO_OR_VIN: 'awaiting_photo',
  AWAITING_CONTACT: 'awaiting_contact',
  AWAITING_CITY: 'awaiting_city'
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
let clientOrders = new Map();

async function loadOrders() {
  try {
    const raw = await fs.readFile(ORDERS_FILE, 'utf8');
    const obj = JSON.parse(raw);
    clientOrders = new Map(Object.entries(obj).map(([key, val]) => [Number(key), val]));
    console.log('–ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (err) {
    if (err.code !== 'ENOENT') {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
    }
    clientOrders = new Map();
  }
}

async function saveOrders() {
  try {
    const obj = Object.fromEntries(clientOrders);
    await fs.writeFile(ORDERS_FILE, JSON.stringify(obj, null, 2));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', err);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
loadOrders().then(() => {
  console.log('–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
}).catch(console.error);

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(ctx) {
  return ctx.reply(
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    Markup.keyboard([
      ['üîç –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π'],
      ['‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ'],
      ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']
    ])
    .resize()
    .oneTime()
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(async (ctx) => {
  const userId = ctx.chat.id;
  userSessions.set(userId, { state: USER_STATE.IDLE });
  await showMainMenu(ctx);
});

bot.hears('‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', async (ctx) => {
  await ctx.reply(
    `–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n\n‚úÖ –ü–æ–¥–±–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π\n‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∏–∑. –∏ —é—Ä. –ª–∏—Ü–∞–º–∏\n‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –ö—Ä—ã–º—É\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–±–æ—Ä–∞ - 1-2 —á–∞—Å–∞`,
    Markup.keyboard([
      ['üîç –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π'],
      ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ])
    .resize()
  );
});

bot.hears('üîç –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π', async (ctx) => {
  const userId = ctx.chat.id;
  userSessions.set(userId, { state: USER_STATE.AWAITING_CAR_INFO });
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è):');
});

bot.hears('üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', async (ctx) => {
  const userId = ctx.chat.id;
  const orders = clientOrders.get(userId) || [];
  
  if (orders.length === 0) {
    await ctx.reply(
      '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
      Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
    );
    return;
  }

  const ordersList = orders.map((order, index) => (
    `–ó–∞–∫–∞–∑ #${index + 1}\n` +
    `üÜî ID: ${order.requestId}\n` +
    `üöó –ê–≤—Ç–æ: ${order.car}\n` +
    `üîß –ó–∞–ø—á–∞—Å—Ç–∏: ${order.parts}\n` +
    `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact}\n` +
    `üìç –ì–æ—Ä–æ–¥: ${order.city}\n` +
    `üì¶ –°—Ç–∞—Ç—É—Å: ${order.status}\n` +
    `üìÖ –î–∞—Ç–∞: ${new Date(order.date).toLocaleString('ru-RU')}\n` +
    `‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì`
  )).join('\n\n');

  await ctx.reply(
    `–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (${orders.length}):\n\n${ordersList}`,
    Markup.keyboard([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
});

bot.hears('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
  const userId = ctx.chat.id;
  userSessions.delete(userId);
  await showMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
bot.on('text', async (ctx) => {
  const userId = ctx.chat.id;
  const session = userSessions.get(userId);
  if (!session) return;

  const text = ctx.message.text;

  switch (session.state) {
    case USER_STATE.AWAITING_CAR_INFO:
      session.car = text;
      session.state = USER_STATE.AWAITING_PARTS_INFO;
      await ctx.reply('–ö–∞–∫–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤–∞–º –Ω—É–∂–Ω—ã? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–æ–º–µ—Ä–∞:');
      break;

    case USER_STATE.AWAITING_PARTS_INFO:
      session.parts = text;
      session.state = USER_STATE.AWAITING_PHOTO_OR_VIN;
      await ctx.reply('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ VIN (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):');
      break;

    case USER_STATE.AWAITING_PHOTO_OR_VIN:
      session.photoOrVin = text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : text;
      session.state = USER_STATE.AWAITING_CONTACT;
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏:');
      break;

    case USER_STATE.AWAITING_CONTACT:
      session.contact = text;
      session.state = USER_STATE.AWAITING_CITY;
      await ctx.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ö—Ä—ã–º–∞ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?');
      break;

    case USER_STATE.AWAITING_CITY:
      session.city = text;
      await completeOrder(ctx, userId);
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  const userId = ctx.chat.id;
  const session = userSessions.get(userId);
  
  if (session?.state === USER_STATE.AWAITING_PHOTO_OR_VIN) {
    const file = ctx.message.photo.pop();
    session.photoOrVin = file.file_id;
    session.photoCaption = ctx.message.caption || '';
    session.state = USER_STATE.AWAITING_CONTACT;
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏:');
  }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function completeOrder(ctx, userId) {
  const session = userSessions.get(userId);
  const requestId = uuidv4().split('-')[0];
  
  session.requestId = requestId;
  session.status = '–ù–æ–≤–∞—è';
  session.date = new Date().toISOString();

  if (!clientOrders.has(userId)) {
    clientOrders.set(userId, []);
  }
  clientOrders.get(userId).push({ ...session });
  await saveOrders();

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
  const orderMessage = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${requestId}\n\n` +
    `üë§ –ö–ª–∏–µ–Ω—Ç: ${userId}\n` +
    `üöó –ê–≤—Ç–æ: ${session.car}\n` +
    `üîß –ó–∞–ø—á–∞—Å—Ç–∏: ${session.parts}\n` +
    `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${session.contact}\n` +
    `üìç –ì–æ—Ä–æ–¥: ${session.city}`;

  try {
    for (const adminId of adminIds) {
      if (session.photoOrVin.startsWith('Ag')) {
        await bot.telegram.sendPhoto(
          adminId,
          session.photoOrVin,
          {
            caption: orderMessage,
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_${userId}_${requestId}`)
            ])
          }
        );
      } else {
        await bot.telegram.sendMessage(
          adminId,
          `${orderMessage}\nüì∑ VIN/–§–æ—Ç–æ: ${session.photoOrVin}`,
          Markup.inlineKeyboard([
            Markup.button.callback('‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_${userId}_${requestId}`)
          ])
        );
      }
    }

    await ctx.reply(
      '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤.',
      Markup.keyboard([
        ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
        ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ]).resize()
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  userSessions.delete(userId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
bot.action(/^take_(\d+)_(.+)$/, async (ctx) => {
  const [_, userId, requestId] = ctx.match;
  const requestKey = `${userId}_${requestId}`;

  if (activeRequests.has(requestKey)) {
    return await ctx.answerCbQuery('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ');
  }

  activeRequests.add(requestKey);

  try {
    await ctx.editMessageReplyMarkup(undefined);
    await ctx.answerCbQuery('–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const orders = clientOrders.get(Number(userId)) || [];
    const orderIndex = orders.findIndex(o => o.requestId === requestId);
    
    if (orderIndex !== -1) {
      orders[orderIndex].status = '–í —Ä–∞–±–æ—Ç–µ';
      clientOrders.set(Number(userId), orders);
      await saveOrders();
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await bot.telegram.sendMessage(
      userId,
      `üîÑ –í–∞—à –∑–∞–∫–∞–∑ #${requestId} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!`
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    const adminName = ctx.from.first_name || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    await Promise.all(
      adminIds
        .filter(id => id !== ctx.from.id)
        .map(id => 
          bot.telegram.sendMessage(
            id,
            `üì¢ –ó–∞–∫–∞–∑ #${requestId} (–∫–ª–∏–µ–Ω—Ç ${userId}) –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É ${adminName}`
          )
        )
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', err);
  } finally {
    activeRequests.delete(requestKey);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ ${ctx.chat?.id}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// –ì—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));